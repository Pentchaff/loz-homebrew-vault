/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MultiTagPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MultiTagPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerEvent(
      this.app.workspace.on("file-menu", (menu, file, source) => {
        if (file instanceof import_obsidian.TFolder) {
          menu.addItem((item) => {
            item.setIcon("tag").setTitle("Tag folder's files").onClick(
              () => new TagModal(this.app, file, searchThroughFolders).open()
            );
          });
        }
      })
    );
    this.registerEvent(
      this.app.workspace.on("files-menu", (menu, file, source) => {
        menu.addItem((item) => {
          item.setIcon("tag").setTitle("Tag selected files").onClick(() => new TagModal(this.app, file, FilesOrFolders).open());
        });
      })
    );
  }
};
function searchThroughFolders(obj, string) {
  for (let child of obj.children) {
    if (child instanceof import_obsidian.TFolder) {
      searchThroughFolders(child, string);
    }
    if (child instanceof import_obsidian.TFile && child.extension === "md") {
      appendToFile(child, string);
    }
  }
}
function appendToFile(file, string) {
  this.app.vault.append(file, `
${string}`);
}
function FilesOrFolders(arr, string) {
  for (let el of arr) {
    if (el instanceof import_obsidian.TFile && el.extension === "md") {
      appendToFile(el, string);
    }
  }
}
var TagModal = class extends import_obsidian.Modal {
  constructor(app, base, submission) {
    super(app);
    this.default = "";
    if (base instanceof import_obsidian.TFolder) {
      this.default = `#${base.name.replace(" ", "-")}`;
    }
    this.base = base;
    this.submission = submission;
  }
  onSubmit(e, input) {
    e.preventDefault();
    this.submission(this.base, input);
    this.close();
  }
  onOpen() {
    this.modalEl.addClass("modal");
    const { contentEl, titleEl } = this;
    titleEl.createEl("h2", { text: "Please type in a tag." });
    contentEl.createEl("span", {
      text: "Whatever text is inputted will be appended to all selected files as text.  Place '#' signs to identify tags."
    });
    contentEl.createEl("form", { cls: "modal-form" }, (formEl) => {
      let input = formEl.createEl("input", { value: this.default });
      formEl.createDiv("modal-button-container", (buttonEl) => {
        let btnSubmit = buttonEl.createEl("button", {
          text: "Submit",
          type: "submit",
          cls: "mod-cta"
        });
        let btnCancel = buttonEl.createEl("button", {
          text: "Cancel",
          type: "cancel"
        });
        btnCancel.addEventListener("click", () => this.close());
      });
      formEl.addEventListener("submit", (e) => this.onSubmit(e, input.value));
    });
  }
};
